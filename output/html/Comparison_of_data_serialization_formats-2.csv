Format, Null, Booleans, Integer, Floating-point, String, Array, Associative array/Object
ASN.1 (BER  PER or OER encoding), NULL type, BOOLEAN: BER: as 1 byte in binary form; PER: as 1 bit; OER: as 1 byte, INTEGER: BER: variable-length big-endian binary representation (up to 2^(2^1024) bits); PER Unaligned: a fixed number of bits if the integer type has a finite range; a variable number of bits otherwise; PER Aligned: a fixed number of bits if the integer type has a finite range and the size of the range is less than 65536; a variable number of octets otherwise; OER: one  two  or four octets (either signed or unsigned) if the integer type has a finite range that fits in that number of octets; a variable number of octets otherwise, REAL: base-10 real values are represented as character strings in ISO 6093 format; binary real values are represented in a binary format that includes the mantissa  the base (2  8  or 16)  and the exponent; the special values NaN  -INF  +INF  and negative zero are also supported, Multiple valid types (VisibleString  PrintableString  GeneralString  UniversalString  UTF8String), data specifications SET OF (unordered) and SEQUENCE OF (guaranteed order), user definable type
Binn, \x00, True: \x01 False: \x02, big-endian 2's complement signed and unsigned 8/16/32/64 bits, single: big-endian binary32 double: big-endian binary64, UTF-8 encoded  null terminated  preceded by int8 or int32 string length in bytes, Typecode (one byte) + 1-4 bytes size + 1-4 bytes items count + list items, Typecode (one byte) + 1-4 bytes size + 1-4 bytes items count + key/value pairs
BSON, Null type – 0 bytes for value, True: one byte \x01 False: \x00, int32: 32-bit little-endian 2's complement or int64: 64-bit little-endian 2's complement, double: little-endian binary64, UTF-8 encoded  preceded by int32 encoded string length in bytes, BSON embedded document with numeric keys, BSON embedded document
Concise Binary Object Representation (CBOR), \xf6, True: \xf5 False: \xf4, Small positive number \x00-\x17  small negative number \x20-\x37 (abs(N) <= 23) 8-bit: positive \x18\xhh  negative \x38\xhh 16-bit: positive \x19<uint16_t>  negative \x39<uint16_t> 32-bit: positive \x1A<uint32_t>  negative \x3A<uint32_t> 64-bit: positive \x1B<uint64_t>  negative \x3B<uint64_t> Negative number x encoded as ~x (binary inversion) or as (-x-1) Byte order – Big-endian, Typecode (one byte) + IEEE half/single/double, Typecode with length (like integer coding) and content. Bytestring and UTF-8 have different typecode, Typecode with count (like integer coding) and items, Typecode with pairs count (like integer coding) and pairs
Efficient XML Interchange (EXI), xsi:nil element (1-4 bits depending on context), 1 bit., 0–12 bits (log2 range) bits for integers with defined ranges less than 4096. Extensible sequence of octets with infinite range for larger or undefined ranges. Also supports custom representations., Scalable floating point representation requiring 18 to 88 bits depending on magnitude. Also supports IEEE and custom representations., Length prefixed sequence of Unicode code points with partitioned string tables for efficient representation of repeated items. The length and code points are represented as variable length unsigned integers where values under 128 require 1 octet each. Also supports custom representations., Repeated elements or length-prefixed list of values. Also supports custom representations., Ordered (sequence) or unordered (all) group of named elements.
FlatBuffers, Encoded as absence of field in parent object, True: one byte \x01 False: \x00, little-endian 2's complement signed and unsigned 8/16/32/64 bits, floats: little-endian binary32 doubles: little-endian binary64, UTF-8 encoded  preceded by 32 bit integer length of string in bytes, Vectors of any other type  preceded by 32 bit integer length of number of elements, Tables (schema defined types) or Vectors sorted by key (maps / dictionaries)
MessagePack, \xc0, True: \xc3 False: \xc2, Single byte "fixnum" (values -32..127) or typecode (one byte) + big-endian (u)int8/16/32/64, Typecode (one byte) + IEEE single/double, Typecode + up to 15 bytes or typecode + length as uint8/16/32 + bytes; encoding is unspecified[15], As "fixarray" (single-byte prefix + up to 15 array items) or typecode (one byte) + 2–4 bytes length + array items, As "fixmap" (single-byte prefix + up to 15 key-value pairs) or typecode (one byte) + 2–4 bytes length + key-value pairs
Netstrings, 0: , True: 1:1  False: 1:0 , , , , , 
OGDL Binary, , , , , , , 
Property list (binary format), , , , , , , 
Protocol Buffers, , , Variable encoding length signed 32-bit: varint encoding of "ZigZag"-encoded value (n << 1) XOR (n >> 31) Variable encoding length signed 64-bit: varint encoding of "ZigZag"-encoded (n << 1) XOR (n >> 63) Constant encoding length 32-bit: 32 bits in little-endian 2's complement Constant encoding length 64-bit: 64 bits in little-endian 2's complement, floats: little-endian binary32 doubles: little-endian binary64, UTF-8 encoded  preceded by varint-encoded integer length of string in bytes, Repeated value with the same tag, N/A
Smile, \x21, True: \x23 False: \x22, Single byte "small" (values -16..15 encoded using \xc0 - \xdf)  zigzag-encoded varints (1–11 data bytes)  or BigInteger, IEEE single/double  BigDecimal, Length-prefixed "short" Strings (up to 64 bytes)  marker-terminated "long" Strings and (optional) back-references, Arbitrary-length heterogenous arrays with end-marker, Arbitrary-length key/value pairs with end-marker
Structured Data eXchange Formats (SDXF), , , big-endian signed 24-bit or 32-bit integer, big-endian IEEE double, either UTF-8 or ISO 8859-1 encoded, list of elements with identical ID and size  preceded by array header with int16 length, chunks can contain other chunks to arbitrary depth
Thrift, , , , , , , 

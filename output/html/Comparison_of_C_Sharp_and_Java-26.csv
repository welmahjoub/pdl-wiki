Java, C#
Using GraalVM[edit] Context polyglot = Context.newBuilder().allowAllAccess(true).build();

//Ruby
Value rubyArray = polyglot.eval("ruby"  "[1 2 42 4]");
int rubyResult = rubyArray.getArrayElement(2).asInt();

//Python
Value pythonArray = context.eval("python"  "[1 2 42 4]");
int pythonResult = pythonArray.getArrayElement(2).asInt();

//JavaScript
Value jsArray = polyglot.eval("js"  "[1 2 42 4]");
int jsResult = jsArray.getArrayElement(2).asInt();

//R
Value rArray = polyglot.eval("R"  "c(1 2 42 4)");
int rResult = rArray.getArrayElement(2).asInt();

//LLVM (in this case C  but could be C++  Go  Basic  etc...)
Source source = Source.newBuilder("llvm"  new File("C_Program.bc")).build();
Value cpart = polyglot.eval(source);
cpart.getMember("main").execute();
 Traditional way[edit] // initialize the engine
var invocable = new ScriptEngineManager().getEngineByName("jruby");
var rubyFile = new FileReader("Deepthought.rb");
engine.eval(fr);, // initialize the engine

var runtime = ScriptRuntime.CreateFromConfiguration();
dynamic globals = runtime.Globals;

runtime.ExecuteFile("Deepthought.rb");
 // create a new instance of "Deepthought" calculator
var calc = globals.Deepthought.@new();

// set calculator input values
calc.a = 6;
calc.b = 7;

// calculate the result
var answer = calc.Calculate();
 // create a new instance of "Deepthought" calculator
var calcClass = engine.eval("Deepthought");
var calc = invocable.invokeMethod(calcClass  "new");

// set calculator input values
invocable.invokeMethod(calc  "a="  6);
invocable.invokeMethod(calc  "b="  7);

// calculate the result
var answer = invocable.invokeMethod(calc  "Calculate");
Notes for the Java implementation: Ruby accessors names are generated from the attribute name with a = suffix. When assigning values  Java developers must use the Ruby accessor method name. Dynamic objects from a foreign language are not first-class objects in that they must be manipulated through an API., Notes for the C# implementation: Objects returned from properties or methods of dynamic objects are themselves of dynamic type. When type inference (the var keyword) is used  the variables calc and answer are inferred dynamic/late-bound. Dynamic  late-bounds objects are first-class citizens that can be manipulated using C# syntax even though they have been created by an external language. new is a reserved word. The @ prefix allows keywords to be used as identifiers., 
